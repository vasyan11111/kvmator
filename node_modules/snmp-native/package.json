{
  "name": "snmp-native",
  "description": "A native Javascript SNMP implementation for Node.js",
  "author": {
    "name": "Jakob Borg",
    "email": "jakob@nym.se",
    "url": "http://nym.se/"
  },
  "keywords": [
    "snmp",
    "asn.1",
    "asn1",
    "network",
    "monitoring"
  ],
  "homepage": "http://nym.se/node-snmp-native/docs/",
  "version": "1.0.15",
  "main": "lib/snmp.js",
  "scripts": {
    "test": "NODE_PATH=lib mocha -R spec",
    "hint": "jshint *.js lib/*.js",
    "doc": "docco lib/* example.js 2>/dev/null",
    "cov": "jscoverage lib lib-cov && EXPRESS_COV=1 NODE_PATH=lib-cov mocha -R html-cov > docs/coverage.html"
  },
  "dependencies": {},
  "devDependencies": {
    "docco": "~0.6.2",
    "jscoverage": "~0.3.6",
    "jshint": "~1.1.0",
    "mocha": "~1.9.0",
    "should": "~1.2.2",
    "snmpjs": "~0.1.3"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/calmh/node-snmp-native.git"
  },
  "bugs": {
    "url": "http://github.com/calmh/node-snmp-native/issues",
    "email": "snmp@nym.se"
  },
  "readme": "                                                                 __\n                                                                /\\ \\__  __\n      ____    ___     ___ ___   _____              ___      __  \\ \\ ,_\\/\\_\\   __  __     __\n     /',__\\ /' _ `\\ /' __` __`\\/\\ '__`\\  _______ /' _ `\\  /'__`\\ \\ \\ \\/\\/\\ \\ /\\ \\/\\ \\  /'__`\\\n    /\\__, `\\/\\ \\/\\ \\/\\ \\/\\ \\/\\ \\ \\ \\L\\ \\/\\______\\/\\ \\/\\ \\/\\ \\L\\.\\_\\ \\ \\_\\ \\ \\\\ \\ \\_/ |/\\  __/\n    \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\ \\_\\ \\ ,__/\\/______/\\ \\_\\ \\_\\ \\__/.\\_\\\\ \\__\\\\ \\_\\\\ \\___/ \\ \\____\\\n     \\/___/  \\/_/\\/_/\\/_/\\/_/\\/_/\\ \\ \\/           \\/_/\\/_/\\/__/\\/_/ \\/__/ \\/_/ \\/__/   \\/____/\n                                  \\ \\_\\\n                                   \\/_/\n\nsnmp-native  [![Build Status](https://secure.travis-ci.org/calmh/node-snmp-native.png)](http://travis-ci.org/calmh/node-snmp-native)\n===========\n\nThis is a native SNMP library for Node.js. The purpose is to provide enough\nfunctionality to perform large scale monitoring of network equipment. Current\nfeatures towards this end are:\n\n - Full implementation of SNMPv2c, including 64 bit data types.\n - Support for Get, GetNext and Set requests, with optimizations such as GetAll\n   and GetSubtree.\n - No unusual external dependencies, no non-JavaScript code.\n - Very high performance, unlimited parallellism. (There are always limits.\n   However, there are no arbitrary such imposed by this code and you at least\n   won't run out of file descriptors.)\n - De facto standards compliance. Generated packets are compared against\n   Net-SNMP and should be identical in all relevant aspects.\n - Well tested. Test coverage should be at or close to 100% for all important\n   code paths.\n\nIt specifically does *not* include:\n\n - Compatibility with SNMPv1, SNMPv2u or SNMPv3. These are (in order)\n   deprecated, weird, and too complicated. Yes, it's an opinionated library.\n - MIB parsing. Do this in your client app if it's necessary.\n\nIt's optimized for polling tens of thousands of counters on hundreds or\nthousands of hosts in a parallell manner. This is known to work (although\nperformance might be limited by less than optimal SNMP agent implementations in\nrandom network gear).\n\nDocumentation\n=============\n\nSee API documentation below, the [annotated source code](http://nym.se/node-snmp-native/docs/snmp.html)\nand an [example](http://nym.se/node-snmp-native/docs/example.html) to get started.\n\nInstallation\n------------\n\n    $ npm install snmp-native\n\nUsage\n-----\n\n### Import\n\n```javascript\nvar snmp = require('snmp-native');\n```\n\n### new Session(options)\n\nCreate a `Session`. The `Session` constructor, like most of the other\nfunctions, take an `options` object. The options passed to the `Session` will\nbe the defaults for any subsequent function calls on that session, but can be\noverridden as needed. Useful parameters here are `host`, `port` and `family`.\n\n```javascript\n// Create a Session with default settings.\nvar session = new snmp.Session();\n\n// Create a Session with explicit default host, port, and community.\nvar session = new snmp.Session({ host: 'device.example.com', port: 161, community: 'special' });\n\n// Create an IPv6 Session.\nvar session = new snmp.Session({ host: '2001:db8::42', family: 'udp6', community: 'private' });\n```\n\nThe following options are recognized as properties in the options object. All\ncan be specified in the `Session` constructor and optionally overridden at a\nlater time by setting them in the option object to a method call.\n\nFor optimum performance when polling many hosts, create a session without\nspecifying the `host`. Reuse this session for all hosts and specify the `host`\non each `get`, `getAll`, etc.\n\n - `host`: The host to send the request to. An resolvable name is allowed in\n   addition to IP addresses. Default: `'localhost'`.\n - `port`: The UDP port number to send the request to. Default: `161`.\n - `community`: The SNMP community name. Default: `'public'`.\n - `family`: Address family to bind to. This is only used by the `Session`\n   constructor since that is when the bind is done. It cannot be changed or\n   overridden after construction. Default: `'udp4'`. Valid values: `'udp4'` or\n   `'udp6'`.\n - `timeouts`: An array of timeout values. Values are times in milliseconds,\n   the length of the array is the total number of transmissions that will\n   occur. Default: `[5000, 5000, 5000, 5000]` (four attempts, with five seconds\n   between each). A backoff can be implemented by timeouts along the lines of\n   `[ 1000, 2000, 4000, 8000 ]`. Retransmissions can be disabled by using only\n   a single timeout value: `[ 5000 ]`.\n\n### VarBind objects\n\nAll of the `get*` functions return arrays of `VarBind` as the result to the\ncallback. The `VarBind` objects have the following properties:\n\n - `oid`: The OID they represent (in array form).\n - `type`: The integer type code for the returned value.\n - `value`: The value, in decoded form. This will be an integer for integer,\n   gauge, counter and timetick types, a string for an octet string value, an\n   array for array or IP number types.\n - `valueRaw`: For octet string values, this is a raw `Buffer` representing the string.\n - `valueHex`: For octet string values, this is a hex string representation of the value.\n - `sendStamp`: The timestamp (in milliseconds) when the request was transmitted.\n - `receiveStamp`: The timestamp (in milliseconds) when the response was received.\n\n### get(options, callback)\n\nPerform a simple GetRequest. Options (in addition to the ones defined above for `Session`):\n\n - `oid`: The OID to get. Example: `[1, 3, 6, 1, 4, 1, 1, 2, 3, 4]` or\n   `'.1.3.6.1.4.1.1.2.3.4'`. Both forms are accepted, but the string form will\n   need to be parsed to an array, slightly increasing CPU usage.\n \nWill call the specified `callback` with an `error` object (`null` on success)\nand the varbind that was received.\n\n```javascript\nsession.get({ oid: [1, 3, 6, 1, 4, 1, 42, 1, 0] }, function (error, varbinds) {\n    if (error) {\n        console.log('Fail :(');\n    } else {\n        console.log(varbinds[0].oid + ' = ' + varbinds[0].value + ' (' + varbinds[0].type + ')');\n    }\n});\n```\n\nYou can also specify host, community, etc explicitly.\n\n```javascript\nsession.get({ oid: [1, 3, 6, 1, 4, 1, 42, 1, 0], host: 'localhost', community: 'test' }, ...);\n```\n\n### getNext(options, callback)\n\nPerform a simple GetNextRequest. Options:\n\n - `oid`: The OID to get. Example: `[1, 3, 6, 1, 4, 1, 1, 2, 3, 4]` or `'.1.3.6.1.4.1.1.2.3.4'`.\n\nWill call the specified `callback` with an `error` object (`null` on success)\nand the varbind that was received.\n\n```javascript\nsession.getNext({ oid: [1, 3, 6, 1, 4, 1, 42, 1, 0] }, function (error, varbinds) {\n    if (error) {\n        console.log('Fail :(');\n    } else {\n        console.log(varbinds[0].oid + ' = ' + varbinds[0].value + ' (' + varbinds[0].type + ')');\n    }\n});\n```\n\n### getAll(options, callback)\n\nPerform repeated GetRequests to fetch all the required values. Multiple OIDs\nwill get packed into as few GetRequest packets as possible to minimize\nroundtrip delays. Gets will be issued serially (not in parallell) to avoid\nflooding hosts. Options:\n\n - `oids`: An array of OIDs to get. Example: `[[1, 3, 6, 1, 4, 1, 1, 2, 3], [1,\n   3, 6, 1, 4, 1, 1, 2, 4]]` or `['.1.3.6.1.4.1.1.2.3.4',\n   '.1.3.6.1.4.1.2.3.4.5']`.\n - `abortOnError`: Whether to stop or continue when an error is encountered.\n   Default: `false`.\n\nThe callback will be called with an error object or a list of varbinds. If the\noptions property `abortOnError` is false (default) any variables that couldn't\nbe fetched will simply be omitted from the results. If it is true, the callback\nwill be called with an error object on any failure.\n\n```javascript\nvar oids = [ [1, 3, 6, 1, 4, 1, 42, 1, 0], [1, 3, 6, 1, 4, 1, 42, 2, 0], ... ];\nsession.getAll({ oids: oids }, function (error, varbinds) {\n    varbinds.forEach(function (vb) {\n        console.log(vb.oid + ' = ' + vb.value + ' (' + vb.type + ')');\n    });\n});\n```\n\n### getSubtree(options, callback)\n\nPerform repeated GetNextRequests to fetch all values in the specified tree. Options:\n\n - `oid`: The OID to get. Example: `[1, 3, 6, 1, 4, 1, 1, 2, 3, 4]` or `'.1.3.6.1.4.1.1.2.3.4'`.\n\nWill call the specified `callback` with an `error` object (`null` on success)\nand the list of varbinds that was fetched.\n\n```javascript\nsession.getSubtree({ oid: [1, 3, 6, 1, 4, 1, 42] }, function (error, varbinds) {\n    if (error) {\n        console.log('Fail :(');\n    } else {\n        varbinds.forEach(function (vb) {\n            console.log(vb.oid + ' = ' + vb.value + ' (' + vb.type + ')');\n        });\n    }\n});\n```\n\n### set(options, callback)\n\nPerform a simple SetRequest. Options:\n\n - `oid`: The OID to perform the set on. Example: `[1, 3, 6, 1, 4, 1, 1, 2, 3, 4]`\n   or `'.1.3.6.1.4.1.1.2.3.4'`.\n - `value`: The value to set. Example: `42`.\n - `type`: The type of the value. Currently supports `asn1ber.T.Integer` (2), `asn1ber.T.Gauge` (66), \n   `asn1ber.T.IpAddress` (64), `asn1ber.T.OctetString` (4) and `asn1ber.T.Null` (5).\n   Example: `2`.\n\nExample:\n\n```javascript\nsession.set({ oid: [1, 3, 6, 1, 4, 1, 42, 1, 0], value: 42, type: 2 }, function (error, varbind) {\n    if (error) {\n        console.log('Fail :(');\n    } else {\n        console.log('The set is done.');\n    }\n});\n```\n\nIf you're not really interested in the outcome of the set (and if you are, why\naren't you using scripted telnet or ssh instead to begin with?), you can call\nit without a callback:\n\n```javascript\nsession.set({ oid: [1, 3, 6, 1, 4, 1, 42, 1, 0], value: 42, type: 2 });\n```\n\nLicense\n=======\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "_id": "snmp-native@1.0.15",
  "dist": {
    "shasum": "92ea265da2b67d220a5bb0703cb0bd07f0c5d7c1"
  },
  "_from": "snmp-native@*",
  "_resolved": "https://registry.npmjs.org/snmp-native/-/snmp-native-1.0.15.tgz"
}
